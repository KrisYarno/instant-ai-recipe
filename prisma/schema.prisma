// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  preferences       UserPreferences?
  savedRecipes      Recipe[]            @relation("SavedRecipes")
  recentRecipes     Recipe[]            @relation("RecentRecipes")
  likedIngredients  String[]
  dislikedIngredients String[]
  pantryItems       PantryItem[]
  recipeModifications RecipeModification[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App-specific models
model UserPreferences {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  minCookTime       Int?     // in minutes
  maxCookTime       Int?     // in minutes
  isVegan           Boolean  @default(false)
  isVegetarian      Boolean  @default(false)
  allergies         String[]
  dietaryRestrictions String[]
  preferredProteins String[]
  preferredCuisines String[]
  maxRecentRecipes  Int      @default(5)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Recipe {
  id                String   @id @default(cuid())
  title             String
  description       String?
  prepTime          Int      // in minutes
  cookTime          Int      // in minutes
  totalTime         Int      // in minutes
  servings          Int
  difficulty        String?
  cuisine           String?
  
  ingredients       Json     // Array of ingredients with amounts
  instructions      Json     // Array of step-by-step instructions
  nutritionInfo     Json?    // Optional nutrition information
  tips              String?
  
  imageUrl          String?
  customColor       String?  // For card customization
  customLabel       String?  // For card customization
  
  savedByUsers      User[]   @relation("SavedRecipes")
  recentForUsers    User[]   @relation("RecentRecipes")
  modifications     RecipeModification[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model PantryItem {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name        String
  category    String?  // e.g., "protein", "vegetable", "spice"
  quantity    String?
  unit        String?
  expiryDate  DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, name])
}

model RecipeModification {
  id          String   @id @default(cuid())
  recipeId    String
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  userQuery   String   // What the user asked for
  aiResponse  String   // The AI's suggested modification
  applied     Boolean  @default(false)
  
  createdAt   DateTime @default(now())
}
